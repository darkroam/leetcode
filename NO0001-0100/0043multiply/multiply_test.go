package multiply

import "testing"
import "reflect"
import "fmt"

//TestTwoSum ...
func TestSearch(t *testing.T) {
	type testCase struct {
		num1 string
		num2 string
		want string
	}

	testGroup := map[string]testCase{
		"case1":  testCase{"2", "3", "6"},
		"case2":  testCase{"123", "456", "56088"},
		"case3":  testCase{"498828660196", "840477629533", "419254329864656431168468"},
		"case4":  testCase{"498828660196", "0", "0"},
		"case5":  testCase{"648383427", "93073533", "60347336289537591"},
		"case6":  testCase{"658740", "668488573", "440360162578020"},
		"case7":  testCase{"512621602792789759", "73487879881634", "37671474770767230038449567386206"},
		"case8":  testCase{"3876620623801494171", "6529364523802684779", "25311869173291309803201639921518923209"},
		"case9":  testCase{"60974249908865105026646412538664653190280198809433017", "500238825698990292381312765074025160144624723742", "30501687172287445993560048081057096686019986405658336826483685740920318317486606305094807387278589614"},
		"case10": testCase{"83458444980473301653391263123714189145556713064321671729334", "352453711277102176698291112646574931303642352789", "29415238670783654472103906226157293286493505350400537875940839309550672787050391279690788022170682148012526"},
		"case11": testCase{"6913259244", "71103343", "491555843274052692"},
		"case12": testCase{"3876620623801494171", "6529364523802684779", "25311869173291309803201639921518923209"},
		"case13": testCase{"8693896172943796783421077198408567869606", "9046223058568441347342042838", "78646924028484100254449982394574807023938703745248510636917650181828"},
		"case14": testCase{"965851889636410748708524976419405193491", "76217403373357744506668", "73614723071338124550002920276790062642849777489150434879697988"},
		"case15": testCase{"14355478714854666302514729", "779503970348355319998412946775044906515560697320231", "11190152654480517737279055363489680926474865053971735018384005180726707182399"},
	}

	for name, tc := range testGroup {
		t.Run(name, func(t *testing.T) {
			got := Multiply(tc.num1, tc.num2)
			fmt.Println(" got : ", got)
			fmt.Println("want : ", tc.want)
			if !reflect.DeepEqual(got, tc.want) {
				t.Fatalf("want:%#v got:%#v\n", tc.want, got)
			}
		})
	}
}
